<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data.Entity</name>
  </assembly>
  <members>
    <member name="T:System.Data.EntityCommandCompilationException">
      <summary>Represents errors that occur during command compilation; when a command tree could not be produced to represent the command text.</summary>
    </member>
    <member name="M:System.Data.EntityCommandCompilationException.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Data.EntityCommandCompilationException" />.</summary>
    </member>
    <member name="M:System.Data.EntityCommandCompilationException.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:System.Data.EntityCommandCompilationException" />.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Data.EntityCommandCompilationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of <see cref="T:System.Data.EntityCommandCompilationException" />.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.Data.EntityCommandExecutionException">
      <summary>Represents errors that occur when the underlying storage provider could not execute the specified command. This exception usually wraps a provider-specific exception.</summary>
    </member>
    <member name="M:System.Data.EntityCommandExecutionException.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Data.EntityCommandExecutionException" />.</summary>
    </member>
    <member name="M:System.Data.EntityCommandExecutionException.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:System.Data.EntityCommandExecutionException" />.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Data.EntityCommandExecutionException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of <see cref="T:System.Data.EntityCommandExecutionException" />.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.Data.EntityException">
      <summary>Represents Entity Framework-related errors that occur in the EntityClient namespace. The EntityException is the base class for all Entity Framework exceptions thrown by the EntityClient.</summary>
    </member>
    <member name="M:System.Data.EntityException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityException" /> class.</summary>
    </member>
    <member name="M:System.Data.EntityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityException" /> class.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Data.EntityException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityException" /> class.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Data.EntityException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityException" /> class.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.Data.EntityKey">
      <summary>Provides a durable reference to an object that is an instance of an entity type.</summary>
    </member>
    <member name="M:System.Data.EntityKey.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityKey" /> class.</summary>
    </member>
    <member name="M:System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityKey" /> class with an entity set name and a generic <see cref="T:System.Collections.Generic.KeyValuePair" /> collection.</summary>
      <param name="qualifiedEntitySetName">A <see cref="T:System.String" /> that is the entity set name qualified by the entity container name.</param>
      <param name="entityKeyValues">A generic <see cref="T:System.Collections.Generic.KeyValuePair" /> collection.Each key/value pair has a property name as the key and the value of that property as the value. There should be one pair for each property that is part of the <see cref="T:System.Data.EntityKey" />. The order of the key/value pairs is not important, but each key property should be included. The property names are simple names that are not qualified with an entity type name or the schema name.</param>
    </member>
    <member name="M:System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityKey" /> class with an entity set name and an <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of <see cref="T:System.Data.EntityKeyMember" /> objects.</summary>
      <param name="qualifiedEntitySetName">A <see cref="T:System.String" /> that is the entity set name qualified by the entity container name.</param>
      <param name="entityKeyValues">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of <see cref="T:System.Data.EntityKeyMember" /> objects with which to initialize the key. </param>
    </member>
    <member name="M:System.Data.EntityKey.#ctor(System.String,System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityKey" /> class with an entity set name and specific entity key pair.</summary>
      <param name="qualifiedEntitySetName">A <see cref="T:System.String" /> that is the entity set name qualified by the entity container name.</param>
      <param name="keyName">A <see cref="T:System.String" /> that is the name of the key.</param>
      <param name="keyValue">An <see cref="T:System.Object" /> that is the key value.</param>
    </member>
    <member name="P:System.Data.EntityKey.EntityContainerName">
      <summary>Gets or sets the name of the entity container.</summary>
      <returns>A <see cref="T:System.String" /> value that is the name of the entity container for the entity to which the <see cref="T:System.Data.EntityKey" /> belongs.</returns>
    </member>
    <member name="P:System.Data.EntityKey.EntityKeyValues">
      <summary>Gets or sets the key values associated with this <see cref="T:System.Data.EntityKey" />.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of key values for this <see cref="T:System.Data.EntityKey" />.</returns>
    </member>
    <member name="F:System.Data.EntityKey.EntityNotValidKey">
      <summary>A simple <see cref="T:System.Data.EntityKey" /> identifying an entity that resulted from a failed TREAT operation.</summary>
    </member>
    <member name="P:System.Data.EntityKey.EntitySetName">
      <summary>Gets or sets the name of the entity set.</summary>
      <returns>A <see cref="T:System.String" /> value that is the name of the entity set for the entity to which the <see cref="T:System.Data.EntityKey" /> belongs.</returns>
    </member>
    <member name="M:System.Data.EntityKey.Equals(System.Data.EntityKey)">
      <summary>Returns a value that indicates whether this instance is equal to a specified <see cref="T:System.Data.EntityKey" />. </summary>
      <returns>true if this instance and <paramref name="other" /> have equal values; otherwise, false. </returns>
      <param name="other">An <see cref="T:System.Data.EntityKey" /> object to compare with this instance.</param>
    </member>
    <member name="M:System.Data.EntityKey.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object. </summary>
      <returns>true if this instance and <paramref name="obj" /> have equal values; otherwise, false. </returns>
      <param name="obj">An <see cref="T:System.Object" /> to compare with this instance.</param>
    </member>
    <member name="M:System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)">
      <summary>Gets the entity set for this entity key from the given metadata workspace.</summary>
      <returns>The <see cref="T:System.Data.Metadata.Edm.EntitySet" /> for the entity key.</returns>
      <param name="metadataWorkspace">The metadata workspace that contains the entity.</param>
      <exception cref="T:System.ArgumentException">The entity set could not be located in the specified metadata workspace.</exception>
    </member>
    <member name="M:System.Data.EntityKey.GetHashCode">
      <summary>Serves as a hash function for the current <see cref="T:System.Data.EntityKey" /> object. <see cref="M:System.Data.EntityKey.GetHashCode" /> is suitable for hashing algorithms and data structures such as a hash table.</summary>
      <returns>A hash code for the current <see cref="T:System.Data.EntityKey" />.</returns>
    </member>
    <member name="P:System.Data.EntityKey.IsTemporary">
      <summary>Gets a value that indicates whether the <see cref="T:System.Data.EntityKey" /> is temporary.  </summary>
      <returns>true if the <see cref="T:System.Data.EntityKey" /> is temporary; otherwise, false.</returns>
    </member>
    <member name="F:System.Data.EntityKey.NoEntitySetKey">
      <summary>A singleton <see cref="T:System.Data.EntityKey" /> by which a read-only entity is identified. </summary>
    </member>
    <member name="M:System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Helper method that is used to deserialize an <see cref="T:System.Data.EntityKey" />.</summary>
      <param name="context">Describes the source and destination of a given serialized stream and provides an additional caller-defined context.</param>
    </member>
    <member name="M:System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Helper method that is used to deserialize an <see cref="T:System.Data.EntityKey" />.</summary>
      <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
    </member>
    <member name="M:System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)">
      <summary>Compares two <see cref="T:System.Data.EntityKey" /> objects. </summary>
      <returns>true if the <paramref name="key1" /> and <paramref name="key2" /> values are equal; otherwise, false.</returns>
      <param name="key1">A <see cref="T:System.Data.EntityKey" /> to compare.</param>
      <param name="key2">A <see cref="T:System.Data.EntityKey" /> to compare.</param>
    </member>
    <member name="M:System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)">
      <summary>Compares two <see cref="T:System.Data.EntityKey" /> objects. </summary>
      <returns>true if the <paramref name="key1" /> and <paramref name="key2" /> values are not equal; otherwise, false.</returns>
      <param name="key1">A <see cref="T:System.Data.EntityKey" /> to compare.</param>
      <param name="key2">A <see cref="T:System.Data.EntityKey" /> to compare.</param>
    </member>
    <member name="T:System.Data.EntityKeyMember">
      <summary>Represents a key name and value pair that is part of an <see cref="T:System.Data.EntityKey" />.</summary>
    </member>
    <member name="M:System.Data.EntityKeyMember.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityKeyMember" /> class.</summary>
    </member>
    <member name="M:System.Data.EntityKeyMember.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntityKeyMember" /> class with the specified entity key pair.</summary>
      <param name="keyName">A <see cref="T:System.String" /> that is the name of the key.</param>
      <param name="keyValue">An <see cref="T:System.Object" /> that is the key value.</param>
    </member>
    <member name="P:System.Data.EntityKeyMember.Key">
      <summary>The name of the entity key.</summary>
      <returns>A <see cref="T:System.String" /> that is the key name.</returns>
    </member>
    <member name="M:System.Data.EntityKeyMember.ToString">
      <summary>Returns a string representation of the entity key.</summary>
      <returns>A <see cref="T:System.String" />. </returns>
    </member>
    <member name="P:System.Data.EntityKeyMember.Value">
      <summary>The value of the entity key.</summary>
      <returns>An <see cref="T:System.Object" /> that is the key value.</returns>
    </member>
    <member name="T:System.Data.EntitySqlException">
      <summary>Represents errors that occur when parsing Entity SQL command text. This exception is thrown when syntactic or semantic rules are violated.</summary>
    </member>
    <member name="M:System.Data.EntitySqlException.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Data.EntitySqlException" />.</summary>
    </member>
    <member name="M:System.Data.EntitySqlException.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:System.Data.EntitySqlException" /> with a specialized error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Data.EntitySqlException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.EntitySqlException" /> class that uses a specified error message and a reference to the inner exception that is the cause of this exception. </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that caused the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="P:System.Data.EntitySqlException.Column">
      <summary>Gets the approximate column number where the error occurred.</summary>
      <returns>An integer that describes the column number where the error occurred.</returns>
    </member>
    <member name="P:System.Data.EntitySqlException.ErrorContext">
      <summary>Gets the approximate context where the error occurred, if available.</summary>
      <returns>A string that describes the approximate context where the error occurred, if available.</returns>
    </member>
    <member name="P:System.Data.EntitySqlException.ErrorDescription">
      <summary>Gets a description of the error.</summary>
      <returns>A string that describes the error.</returns>
    </member>
    <member name="M:System.Data.EntitySqlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Data.EntitySqlException.Line">
      <summary>Gets the approximate line number where the error occurred.</summary>
      <returns>An integer that describes the line number where the error occurred.</returns>
    </member>
    <member name="P:System.Data.EntitySqlException.Message">
      <summary>Gets the full error message. As available, the message contains the error description, context, line number, and column number.</summary>
      <returns>A string describing the full error message. As available, the message contains the error description, context, line number, and column number. </returns>
    </member>
    <member name="T:System.Data.EntityState">
      <summary>The state of an entity object. </summary>
    </member>
    <member name="F:System.Data.EntityState.Detached">
      <summary>The object exists but it is not being tracked by Object Services. An entity is in this state immediately after it has been created and before it is added to the object context. An entity is also in this state after it has been removed from the context by calling the <see cref="M:System.Data.Objects.ObjectContext.Detach(System.Object)" /> method or if it is loaded using a <see cref="F:System.Data.Objects.MergeOption.NoTracking" /><see cref="T:System.Data.Objects.MergeOption" />.</summary>
    </member>
    <member name="F:System.Data.EntityState.Unchanged">
      <summary>The object has not been modified since it was loaded into the context or since the last time that the <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> method was called.</summary>
    </member>
    <member name="F:System.Data.EntityState.Added">
      <summary>The object is added to the object context and the <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> method has not been called. Objects are added to the object context by calling the <see cref="M:System.Data.Objects.ObjectContext.AddObject(System.String,System.Object)" /> method.</summary>
    </member>
    <member name="F:System.Data.EntityState.Deleted">
      <summary>The object is deleted from the object context by using the <see cref="M:System.Data.Objects.ObjectContext.DeleteObject(System.Object)" /> method.</summary>
    </member>
    <member name="F:System.Data.EntityState.Modified">
      <summary>The object is changed but the <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> method has not been called.</summary>
    </member>
    <member name="T:System.Data.IExtendedDataRecord">
      <summary>Provides access to the column values within each row of a <see cref="T:System.Data.Common.DbDataRecord" /> for a <see cref="T:System.Data.Common.DbDataReader" />.</summary>
    </member>
    <member name="P:System.Data.IExtendedDataRecord.DataRecordInfo">
      <summary>Gets <see cref="T:System.Data.Common.DataRecordInfo" /> for this <see cref="T:System.Data.IExtendedDataRecord" />.</summary>
      <returns>A <see cref="T:System.Data.Common.DataRecordInfo" /> object.</returns>
    </member>
    <member name="M:System.Data.IExtendedDataRecord.GetDataReader(System.Int32)">
      <summary>Returns nested readers as <see cref="T:System.Data.Common.DbDataReader" /> objects.</summary>
      <returns>Nested readers as <see cref="T:System.Data.Common.DbDataReader" /> objects.</returns>
      <param name="i">The ordinal of the column.</param>
    </member>
    <member name="M:System.Data.IExtendedDataRecord.GetDataRecord(System.Int32)">
      <summary>Gets a <see cref="T:System.Data.Common.DbDataRecord" /> object with the specified index.</summary>
      <returns>A <see cref="T:System.Data.Common.DbDataRecord" /> object. </returns>
      <param name="i">The index of the row.</param>
    </member>
    <member name="T:System.Data.InvalidCommandTreeException">
      <summary>The exception that is thrown to indicate that a command tree is invalid. </summary>
    </member>
    <member name="M:System.Data.InvalidCommandTreeException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.InvalidCommandTreeException" /> class  with a default message. </summary>
    </member>
    <member name="M:System.Data.InvalidCommandTreeException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.InvalidCommandTreeException" /> class with the specified message. </summary>
      <param name="message">The exception message.</param>
    </member>
    <member name="M:System.Data.InvalidCommandTreeException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.InvalidCommandTreeException" /> class  with the specified message and inner exception. </summary>
      <param name="message">The exception message.</param>
      <param name="innerException">The exception that is the cause of this <see cref="T:System.Data.InvalidCommandTreeException" />.</param>
    </member>
    <member name="T:System.Data.MappingException">
      <summary>The exception that is thrown when mapping related service requests fail.</summary>
    </member>
    <member name="M:System.Data.MappingException.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Data.MappingException" />.</summary>
    </member>
    <member name="M:System.Data.MappingException.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:System.Data.MappingException" /> with a specialized error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Data.MappingException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of <see cref="T:System.Data.MappingException" /> that uses a specified error message and a reference to the inner exception.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.Data.MetadataException">
      <summary>The exception that is thrown when metadata related service requests fails. </summary>
    </member>
    <member name="M:System.Data.MetadataException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.MetadataException" /> class with a default message. </summary>
    </member>
    <member name="M:System.Data.MetadataException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.MetadataException" /> class with the specified message. </summary>
      <param name="message">The exception message.</param>
    </member>
    <member name="M:System.Data.MetadataException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.MetadataException" /> class with the specified message and inner exception. </summary>
      <param name="message">The exception message.</param>
      <param name="innerException">The exception that is the cause of this <see cref="T:System.Data.MetadataException" />.</param>
    </member>
    <member name="M:System.Data.MetadataException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Data.ObjectNotFoundException">
      <summary>The exception that is thrown when an object is not present.</summary>
    </member>
    <member name="M:System.Data.ObjectNotFoundException.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Data.ObjectNotFoundException" />.</summary>
    </member>
    <member name="M:System.Data.ObjectNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:System.Data.ObjectNotFoundException" /> with a specialized error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Data.ObjectNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of <see cref="T:System.Data.ObjectNotFoundException" /> class that uses a specified error message and a reference to the inner exception.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.Data.OptimisticConcurrencyException">
      <summary>The exception that is thrown when an optimistic concurrency violation occurs. </summary>
    </member>
    <member name="M:System.Data.OptimisticConcurrencyException.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Data.OptimisticConcurrencyException" />.</summary>
    </member>
    <member name="M:System.Data.OptimisticConcurrencyException.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:System.Data.OptimisticConcurrencyException" /> with a specialized error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Data.OptimisticConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of <see cref="T:System.Data.OptimisticConcurrencyException" /> that uses a specified error message and a reference to the inner exception.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:System.Data.OptimisticConcurrencyException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Data.Objects.ObjectStateEntry})">
      <summary>Initializes a new instance of <see cref="T:System.Data.OptimisticConcurrencyException" /> that uses a specified error message, a reference to the inner exception, and an enumerable collection of <see cref="T:System.Data.Objects.ObjectStateEntry" /> objects.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
      <param name="stateEntries">The enumerable collection of <see cref="T:System.Data.Objects.ObjectStateEntry" /> objects.</param>
    </member>
    <member name="T:System.Data.ProviderIncompatibleException">
      <summary>The exception that is thrown when the underlying data provider is incompatible with the Entity Framework. </summary>
    </member>
    <member name="M:System.Data.ProviderIncompatibleException.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Data.ProviderIncompatibleException" />.</summary>
    </member>
    <member name="M:System.Data.ProviderIncompatibleException.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:System.Data.ProviderIncompatibleException" /> with a specialized error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Data.ProviderIncompatibleException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of <see cref="T:System.Data.ProviderIncompatibleException" /> that uses a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="T:System.Data.UpdateException">
      <summary>The exception that is thrown when modifications to object instances cannot be persisted to the data source.</summary>
    </member>
    <member name="M:System.Data.UpdateException.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Data.UpdateException" />.</summary>
    </member>
    <member name="M:System.Data.UpdateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of <see cref="T:System.Data.UpdateException" /> with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Data.UpdateException.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:System.Data.UpdateException" /> with a specialized error message.</summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Data.UpdateException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.UpdateException" /> class that uses a specified error message and a reference to the inner exception that is the cause of this exception. </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:System.Data.UpdateException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Data.Objects.ObjectStateEntry})">
      <summary>Initializes a new instance of the <see cref="T:System.Data.UpdateException" /> class that uses a specified error message, a reference to the inner exception, and an enumerable collection of <see cref="T:System.Data.Objects.ObjectStateEntry" /> objects.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
      <param name="stateEntries">The collection of <see cref="T:System.Data.Objects.ObjectStateEntry" /> objects.</param>
    </member>
    <member name="P:System.Data.UpdateException.StateEntries">
      <summary>Gets the <see cref="T:System.Data.Objects.ObjectStateEntry" /> objects for this <see cref="T:System.Data.UpdateException" />.</summary>
      <returns>A collection of <see cref="T:System.Data.Objects.ObjectStateEntry" /> objects comprised of either a single entity and 0 or more relationships, or 0 entities and 1 or more relationships.</returns>
    </member>
    <member name="T:System.Data.Common.DataRecordInfo">
      <summary>Provides access to information about the structural type and column information for a <see cref="T:System.Data.Common.DbDataRecord" />.  </summary>
    </member>
    <member name="M:System.Data.Common.DataRecordInfo.#ctor(System.Data.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Metadata.Edm.EdmMember})">
      <summary>Initializes a new <see cref="T:System.Data.Common.DbDataRecord" /> object for a specific type with an enumerable collection of data fields.</summary>
      <param name="metadata">The metadata for the type represented by this object, supplied by <see cref="T:System.Data.Metadata.Edm.TypeUsage" />.</param>
      <param name="memberInfo">An enumerable collection of <see cref="T:System.Data.Metadata.Edm.EdmMember" /> objects that represent column information.</param>
    </member>
    <member name="P:System.Data.Common.DataRecordInfo.FieldMetadata">
      <summary>Gets <see cref="T:System.Data.Common.FieldMetadata" /> for this <see cref="P:System.Data.IExtendedDataRecord.DataRecordInfo" /> object.</summary>
      <returns>A <see cref="T:System.Data.Common.FieldMetadata" /> object.</returns>
    </member>
    <member name="P:System.Data.Common.DataRecordInfo.RecordType">
      <summary>Gets type info for this object as a <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> object.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> value.</returns>
    </member>
    <member name="T:System.Data.Common.DbCommandDefinition">
      <summary>Defines a cacheable command plan.</summary>
    </member>
    <member name="M:System.Data.Common.DbCommandDefinition.#ctor">
      <summary>Initializes a new <see cref="T:System.Data.Common.DbCommandDefinition" />.</summary>
    </member>
    <member name="M:System.Data.Common.DbCommandDefinition.#ctor(System.Data.Common.DbCommand)">
      <summary>Initializes a new <see cref="T:System.Data.Common.DbCommandDefinition" /> using the supplied <see cref="T:System.Data.Common.DbCommand" />.</summary>
      <param name="prototype">The supplied <see cref="T:System.Data.Common.DbCommand" />.</param>
    </member>
    <member name="M:System.Data.Common.DbCommandDefinition.CreateCommand">
      <summary>Creates and returns a <see cref="T:System.Data.Common.DbCommand" /> object that can be executed. </summary>
      <returns>A <see cref="T:System.Data.Common.DbCommand" />.</returns>
    </member>
    <member name="T:System.Data.Common.DbProviderManifest">
      <summary>Represents a base class that can be used by the Entity Framework to obtain provider-specific information at runtime.</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Common.DbProviderManifest" /> class. </summary>
    </member>
    <member name="F:System.Data.Common.DbProviderManifest.ConceptualSchemaDefinition">
      <summary>Represents the string ConceptualSchemaDefinition.</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetDbInformation(System.String)">
      <summary>When overridden in a derived class, returns an XML reader that represents the storage provider-specific information.</summary>
      <returns>An <see cref="T:System.Xml.XMLReader" /> object that represents the storage provider-specific information.</returns>
      <param name="informationType">The name of the information to be retrieved. Providers are required to support the following values: <see cref="F:System.Data.Common.DbProviderManifest.StoreSchemaDefinition" /> or <see cref="F:System.Data.Common.DbProviderManifest.StoreSchemaMapping" />.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetEdmType(System.Data.Metadata.Edm.TypeUsage)">
      <summary>When overridden in a derived class, returns the best mapped equivalent EDM type for a specified storage type.</summary>
      <returns>The instance of that <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> encapsulates both an EDM type and a set of facets for that type.</returns>
      <param name="storeType">The instance of the <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> class that encapsulates both a storage type and a set of facets for that type.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetFacetDescriptions(System.Data.Metadata.Edm.EdmType)">
      <summary>When overridden in a derived class, returns the list of facet descriptions for the specified Entity Data Model (EDM) type.</summary>
      <returns>A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains the list of facet descriptions for the specified Entity Data Model (EDM) type.</returns>
      <param name="edmType">An <see cref="T:System.Data.Metadata.Edm.EdmType" /> for which the facet descriptions are to be retrieved.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetInformation(System.String)">
      <summary>Returns an XML reader that represents the Entity Framework and storage provider-specific information.</summary>
      <returns>An <see cref="T:System.Xml.XMLReader" /> object that represents the Entity Framework and storage provider-specific information.</returns>
      <param name="informationType">The name of the information to be retrieved. The ADO.NET Entity Framework defines the following values:<see cref="F:System.Data.Common.DbProviderManifest.ConceptualSchemaDefinition" /> or <see cref="F:System.Data.Common.DbProviderManifest.StoreSchemaDefinition" />or <see cref="F:System.Data.Common.DbProviderManifest.StoreSchemaMapping" />.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetStoreFunctions">
      <summary>When overridden in a derived class, returns the list of provider-specific functions.</summary>
      <returns>A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains the list of provider-specific functions.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetStoreType(System.Data.Metadata.Edm.TypeUsage)">
      <summary>When overridden in a derived class, returns the best mapped equivalent storage type for a specified Entity Data Model (EDM) type.</summary>
      <returns>The instance of the <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> class that encapsulates both a storage type and a set of facets for that type.</returns>
      <param name="edmType">The instance of the <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> class that encapsulates both an EDM type and a set of facets for that type.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderManifest.GetStoreTypes">
      <summary>When overridden in a derived class, returns the list of primitive types that are supported by the storage provider.</summary>
      <returns>A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains the list of primitive types supported by the storage provider.</returns>
    </member>
    <member name="P:System.Data.Common.DbProviderManifest.NamespaceName">
      <summary>When overridden in a derived class, gets the namespace name supported by this provider manifest.</summary>
      <returns>The namespace name supported by this provider manifest.</returns>
    </member>
    <member name="F:System.Data.Common.DbProviderManifest.StoreSchemaDefinition">
      <summary>Represents the string StoreSchemaDefinition.</summary>
    </member>
    <member name="F:System.Data.Common.DbProviderManifest.StoreSchemaMapping">
      <summary>Represents the string StoreSchemaMapping.</summary>
    </member>
    <member name="T:System.Data.Common.DbProviderServices">
      <summary>Represents a set of methods for creating correct command definition objects and accessing provider manifest information.</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.#ctor">
      <summary>Initializes a new instance of a <see cref="T:System.Data.Common.DbProviderServices" /> class.</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateCommandDefinition(System.Data.Common.CommandTrees.DbCommandTree)">
      <summary>Creates command definition from command tree.</summary>
      <param name="commandTree">Command tree.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateCommandDefinition(System.Data.Common.DbCommand)">
      <summary>Creates a <see cref="T:System.Data.Common.DbCommandDefinition" /> that uses the specified <see cref="T:System.Data.Common.DbCommand" />.</summary>
      <returns>A <see cref="T:System.Data.Common.DbCommandDefinition" /> object that represents the executable command definition object.</returns>
      <param name="prototype">A <see cref="T:System.Data.Common.DbCommand" /> used to create the <see cref="T:System.Data.Common.DbCommandDefinition" />.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.CreateDbCommandDefinition(System.Data.Common.DbProviderManifest,System.Data.Common.CommandTrees.DbCommandTree)">
      <summary>Creates command definition from provider manifest and command tree.</summary>
      <param name="providerManifest">Provider manifest.</param>
      <param name="commandTree">Command tree.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetDbProviderManifest(System.String)">
      <summary>When overridden in a derived class, returns an instance of a class that derives from the <see cref="T:System.Data.Common.DbProviderManifest" />.</summary>
      <returns>A <see cref="T:System.Data.Common.DbProviderManifest" /> object that represents the provider manifest.</returns>
      <param name="manifestToken"></param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetDbProviderManifestToken(System.Data.Common.DbConnection)">
      <summary>Returns provider manifest token given a connection.</summary>
      <param name="connection">Connection to provider.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetProviderManifest(System.String)">
      <summary>Returns the provider manifest by using the specified version information.</summary>
      <returns>A <see cref="T:System.Data.Common.DbProviderManifest" /> object that represents the provider manifest.</returns>
      <param name="manifestToken"></param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetProviderManifestToken(System.Data.Common.DbConnection)">
      <summary>Returns provider manifest token.</summary>
      <param name="connection">Connection to provider.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderServices.GetProviderServices(System.Data.Common.DbConnection)">
      <summary>Returns providers given a connection.</summary>
      <param name="connection">Connection to provider.</param>
    </member>
    <member name="T:System.Data.Common.DbXmlEnabledProviderManifest">
      <summary>Represents a base class that implements the <see cref="T:System.Data.Common.DbProviderManifest" /> based on an XML definition. You can use the <see cref="T:System.Data.Common.DbXmlEnabledProviderManifest" /> class to obtain provider-specific information at runtime. </summary>
    </member>
    <member name="M:System.Data.Common.DbXmlEnabledProviderManifest.#ctor(System.Xml.XmlReader)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Common.DbXmlEnabledProviderManifest" /> class.</summary>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> object that provides access to the XML data in the provider manifest file.</param>
    </member>
    <member name="M:System.Data.Common.DbXmlEnabledProviderManifest.GetFacetDescriptions(System.Data.Metadata.Edm.EdmType)">
      <summary>Returns the list of facet descriptions for the specified Entity Data Model (EDM) type.</summary>
      <returns>A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains the list of facet descriptions for the specified EDM type.</returns>
      <param name="type">An <see cref="T:System.Data.Metadata.Edm.EdmType" /> for which the facet descriptions are to be retrieved.</param>
    </member>
    <member name="M:System.Data.Common.DbXmlEnabledProviderManifest.GetStoreFunctions">
      <summary>Returns the list of provider-supported functions.</summary>
      <returns>A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains the list of provider-supported functions.</returns>
    </member>
    <member name="M:System.Data.Common.DbXmlEnabledProviderManifest.GetStoreTypes">
      <summary>Returns the list of primitive types supported by the storage provider.</summary>
      <returns>A collection of type <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains the list of primitive types supported by the storage provider.</returns>
    </member>
    <member name="P:System.Data.Common.DbXmlEnabledProviderManifest.NamespaceName">
      <summary>Gets the namespace name supported by this provider manifest.</summary>
      <returns>The namespace name supported by this provider manifest.</returns>
    </member>
    <member name="P:System.Data.Common.DbXmlEnabledProviderManifest.StoreTypeNameToEdmPrimitiveType">
      <summary>Gets the best mapped equivalent Entity Data Model (EDM) type for a specified storage type name.</summary>
      <returns>The best mapped equivalent EDM type for a specified storage type name.</returns>
    </member>
    <member name="P:System.Data.Common.DbXmlEnabledProviderManifest.StoreTypeNameToStorePrimitiveType">
      <summary>Gets the best mapped equivalent storage primitive type for a specified storage type name.</summary>
      <returns>The best mapped equivalent storage primitive type for a specified storage type name.</returns>
    </member>
    <member name="T:System.Data.Common.EntityRecordInfo">
      <summary>Provides access to entity metadata. </summary>
    </member>
    <member name="M:System.Data.Common.EntityRecordInfo.#ctor(System.Data.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Metadata.Edm.EdmMember},System.Data.EntityKey,System.Data.Metadata.Edm.EntitySet)">
      <summary>Initializes a new <see cref="T:System.Data.Common.EntityRecordInfo" /> object of a specific entity type with an enumerable collection of data fields and with specific key and entity set information.</summary>
      <param name="metadata">The <see cref="T:System.Data.Metadata.Edm.EntityType" /> of the entity represented by the <see cref="T:System.Data.Common.DbDataRecord" /> described by this <see cref="T:System.Data.Common.EntityRecordInfo" /> object.</param>
      <param name="memberInfo">An enumerable collection of <see cref="T:System.Data.Metadata.Edm.EdmMember" /> objects that represent column information.</param>
      <param name="entityKey">The <see cref="T:System.Data.EntityKey" /> that is the key for the entity.</param>
      <param name="entitySet">An <see cref="T:System.Data.Metadata.Edm.EntitySet" /> object that is the entity set to which the entity belongs.</param>
    </member>
    <member name="P:System.Data.Common.EntityRecordInfo.EntityKey">
      <summary>Gets the <see cref="T:System.Data.EntityKey" /> for the entity.</summary>
      <returns>An <see cref="T:System.Data.EntityKey" />.</returns>
    </member>
    <member name="T:System.Data.Common.FieldMetadata">
      <summary>Provides access to field metadata for a <see cref="T:System.Data.Common.DataRecordInfo" /> object. </summary>
    </member>
    <member name="M:System.Data.Common.FieldMetadata.#ctor(System.Int32,System.Data.Metadata.Edm.EdmMember)">
      <summary>Initializes a new <see cref="T:System.Data.Common.FieldMetadata" /> object with the specified ordinal value and field type.</summary>
      <param name="ordinal">An integer specified the location of the metadata.</param>
      <param name="fieldType">The field type.</param>
    </member>
    <member name="P:System.Data.Common.FieldMetadata.FieldType">
      <summary>Gets the type of field for this <see cref="T:System.Data.Common.FieldMetadata" /> object.</summary>
    </member>
    <member name="P:System.Data.Common.FieldMetadata.Ordinal">
      <summary>Gets the ordinal for this <see cref="T:System.Data.Common.FieldMetadata" /> object.</summary>
      <returns>An integer representing the ordinal value.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbAggregate">
      <summary>Implements the basic functionality required by aggregates in a GroupBy clause. </summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbAggregate.Arguments">
      <summary>Gets the list of expressions that define the arguments to this <see cref="T:System.Data.Common.CommandTrees.DbAggregate" />.</summary>
      <returns>The list of expressions that define the arguments to this <see cref="T:System.Data.Common.CommandTrees.DbAggregate" />.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbAggregate.ResultType">
      <summary>Gets the result type of this <see cref="T:System.Data.Common.CommandTrees.DbAggregate" />. </summary>
      <returns>The result type of this <see cref="T:System.Data.Common.CommandTrees.DbAggregate" />.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbAndExpression">
      <summary>Represents the logical AND of two Boolean arguments. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbAndExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbAndExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by the <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbApplyExpression">
      <summary>Represents an apply operation, which is the invocation of the specified function for each element in the specified input set. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbApplyExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbApplyExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by the <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbApplyExpression.Apply">
      <summary>Gets the <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the function that is invoked for each element in the input set.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the function that is invoked for each element in the input set.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbApplyExpression.Input">
      <summary>Gets the <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbArithmeticExpression">
      <summary>Represents an arithmetic operation applied to numeric arguments. Addition, subtraction, multiplication, division, modulo, and negation are arithmetic operations. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbArithmeticExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbArithmeticExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbArithmeticExpression.Arguments">
      <summary>Gets the list of <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> elements that define the current arguments.</summary>
      <returns>A fixed-size list of <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> elements.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbBinaryExpression">
      <summary>Implements the basic functionality required by expressions that accept two expression operands.</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbBinaryExpression.Left">
      <summary>Gets or sets the <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the left argument.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the left argument.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of the <see cref="T:System.Data.Common.CommandTrees.DbBinaryExpression" />,or its result type is not equal or promotable to the required type for the left argument.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbBinaryExpression.Right">
      <summary>Gets or sets the <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the right argument.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the right argument.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of the <see cref="T:System.Data.Common.CommandTrees.DbBinaryExpression" />,or its result type is not equal or promotable to the required type for the right argument.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbCaseExpression">
      <summary>Represents the When, Then, and Else clauses of the <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbCaseExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbCaseExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor." /></typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbCaseExpression.Else">
      <summary>Gets or sets the Else clause of this <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />.</summary>
      <returns>The Else clause of this <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of the <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />,or its result type is not equal or promotable to the result type of the <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbCaseExpression.Then">
      <summary>Gets the Then clauses of this <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />.</summary>
      <returns>The Then clauses of this <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbCaseExpression.When">
      <summary>Gets the When clauses of this <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />.</summary>
      <returns>The When clauses of this <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbCastExpression">
      <summary>Represents the type conversion of a single argument to the specified type. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbCastExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbCastExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor." /></typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbCommandTree">
      <summary>Implements the basic functionality for the Query, Insert, Update, Delete, and function invocation command tree types. </summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbCommandTree.Parameters">
      <summary>Gets the name and corresponding type of each parameter that can be referenced within this <see cref="T:System.Data.Common.CommandTrees.DbCommandTree" />.</summary>
      <returns>The name and corresponding type of each parameter that can be referenced within this <see cref="T:System.Data.Common.CommandTrees.DbCommandTree" />.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbComparisonExpression">
      <summary>Represents a comparison operation applied to two arguments. Equality, greater than, greater than or equal, less than, less than or equal, and inequality are comparison operations. This class cannot be inherited.  </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbComparisonExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbComparisonExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor." /></typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbConstantExpression">
      <summary>Represents different kinds of constants (literals). This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbConstantExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbConstantExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor." /></typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbConstantExpression.Value">
      <summary>Gets the constant value.</summary>
      <returns>The constant value.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbCrossJoinExpression">
      <summary>Represents an unconditional join operation between the given collection arguments. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbCrossJoinExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbCrossJoinExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor." /></typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbCrossJoinExpression.Inputs">
      <summary>Gets a <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> list that provides the input sets to the join.</summary>
      <returns>A <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> list that provides the input sets to the join.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbDeleteCommandTree">
      <summary>Represents a single row delete operation expressed as a command tree. This class cannot be inherited.  </summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbDeleteCommandTree.Predicate">
      <summary>Gets an <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that specifies the predicate used to determine which members of the target collection should be deleted.</summary>
      <returns>An <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that specifies the predicate used to determine which members of the target collection should be deleted.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbDerefExpression">
      <summary>Represents the an expression that retrieves an entity based on the specified reference. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbDerefExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbDerefExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor." /></typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbDistinctExpression">
      <summary>Removes duplicate elements from the specified set argument. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbDistinctExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbDistinctExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />. </returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor." /></typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbElementExpression">
      <summary>Represents the conversion of the specified set argument to a singleton. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbElementExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbElementExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor." /></typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbEntityRefExpression">
      <summary>Represents an expression that extracts a reference from the underlying entity instance. This class cannot be inherited.  </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbEntityRefExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbEntityRefExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor." /></typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbExceptExpression">
      <summary>Represents the set subtraction operation between the left and right operands. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExceptExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExceptExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor." /></typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbExpression">
      <summary>Implements the basic functionality required by expression types.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>The type of the result produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null).</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbExpression.ExpressionKind">
      <summary>Gets the kind of the expression, which indicates the operation of this expression.</summary>
      <returns>The kind of the expression, which indicates the operation of this expression.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbExpression.ResultType">
      <summary>Gets the type metadata for the result type of the expression.</summary>
      <returns>The type metadata for the result type of the expression.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbExpressionBinding">
      <summary>Represents an input set to relational expressions such as <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" />, <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" />, and <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" />. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbExpressionBinding.Expression">
      <summary>Gets or sets the <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the input set.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the input set.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of the binding, or its result type is not equal or promotable to the result type of the current value of the property.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbExpressionBinding.VariableName">
      <summary>Gets the name assigned to the element variable.</summary>
      <returns>The name assigned to the element variable.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbExpressionBinding.VariableType">
      <summary>Gets the type metadata of the element variable.</summary>
      <returns>The type metadata of the element variable. </returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbExpressionKind">
      <summary>Contains values that each expression class uses to denote the operation it represents. The <see cref="P:System.Data.Common.CommandTrees.DbExpression.ExpressionKind" /> property of an <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> can be retrieved to determine which operation that expression represents.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.All">
      <summary>true-for-all expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.And">
      <summary>Logical AND expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Any">
      <summary>true-for-any expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Case">
      <summary>Conditional case statement expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Cast">
      <summary>Polymorphic type cast expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Constant">
      <summary>Constant value expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.CrossApply">
      <summary>Cross apply expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.CrossJoin">
      <summary>Cross join expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Deref">
      <summary>Dereference expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Distinct">
      <summary>Duplicate removal expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Divide">
      <summary>Division expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Element">
      <summary>Set-to-singleton conversion expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.EntityRef">
      <summary>Entity reference value retrieval expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Equals">
      <summary>Equality expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Except">
      <summary>Set subtraction expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Filter">
      <summary>Restriction expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.FullOuterJoin">
      <summary>Full outer join expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Function">
      <summary>Standalone function expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.GreaterThan">
      <summary>Greater than expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.GreaterThanOrEquals">
      <summary>Greater than or equal expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.GroupBy">
      <summary>Grouping expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.InnerJoin">
      <summary>Inner join expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Intersect">
      <summary>Set intersection expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.IsEmpty">
      <summary>Empty set determination expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.IsNull">
      <summary>Null determination expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.IsOf">
      <summary>Type comparison (specified Type or Subtype) expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.IsOfOnly">
      <summary>Type comparison (specified Type only) expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.LeftOuterJoin">
      <summary>Left outer join expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.LessThan">
      <summary>Less than expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.LessThanOrEquals">
      <summary>Less than or equal expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Like">
      <summary>String comparison expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Limit">
      <summary>Result count restriction (TOP n).</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Minus">
      <summary>Subtraction expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Modulo">
      <summary>Modulo expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Multiply">
      <summary>Multiplication expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.NewInstance">
      <summary>Instance, row, and set construction expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Not">
      <summary>Logical NOT expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.NotEquals">
      <summary>Inequality expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Null">
      <summary>Null expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.OfType">
      <summary>Set members by type (or subtype) expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.OfTypeOnly">
      <summary>Set members by exact type expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Or">
      <summary>Logical OR expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.OuterApply">
      <summary>Outer apply expressions</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.ParameterReference">
      <summary>Reference to a parameter expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Plus">
      <summary>Addition expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Project">
      <summary>Projection expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Property">
      <summary>Static or instance property retrieval expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Ref">
      <summary>Reference expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.RefKey">
      <summary>Ref key value retrieval expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.RelationshipNavigation">
      <summary>Relationship (composition or association) navigation expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Scan">
      <summary>Entity or relationship set scan expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Skip">
      <summary>Skip elements of an ordered collection.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Sort">
      <summary>Sorting expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.Treat">
      <summary>Type conversion expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.UnaryMinus">
      <summary>Negation expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.UnionAll">
      <summary>Set union (with duplicates) expressions.</summary>
    </member>
    <member name="F:System.Data.Common.CommandTrees.DbExpressionKind.VariableReference">
      <summary>Reference to a variable expressions.</summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbExpressionVisitor">
      <summary>Defines the basic functionality that should be implemented by visitors that do not return a result value.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> class.  </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbAndExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbAndExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbAndExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbApplyExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbArithmeticExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbCaseExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbCastExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbCastExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbCastExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbComparisonExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbComparisonExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.Db ComparisonExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbConstantExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbCrossJoinExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbCrossJoinExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbDerefExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbDerefExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbDerefExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbDistinctExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbDistinctExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbDistinctExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbElementExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbElementExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbElementExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbEntityRefExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbEntityRefExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbEntityRefExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbExceptExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbExceptExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbExceptExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbExpression)">
      <summary>When overridden in a derived class, handles any expression of an unrecognized type.</summary>
      <param name="expression">The expression to be handled.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbFilterExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbFunctionExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbGroupByExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbGroupByExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbGroupByExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIntersectExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbIntersectExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbIntersectExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbIsEmptyExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbIsEmptyExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIsNullExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbIsNullExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbIsNullExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbIsOfExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbIsOfExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbIsOfExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbJoinExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbLikeExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbLimitExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbNotExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbNotExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbNotExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbNullExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbNullExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbNullExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbOfTypeExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbOfTypeExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbOfTypeExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbOrExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbOrExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbOrExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbProjectExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbPropertyExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbQuantifierExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbRefExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbRefKeyExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbRefKeyExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbRefKeyExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbScanExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbScanExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbScanExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbSkipExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbSortExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbTreatExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbTreatExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbTreatExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbUnionAllExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbUnionAllExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbUnionAllExpression" /> that is visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" />.</summary>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" /> that is visited.</param>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbExpressionVisitor`1">
      <summary>Defines the basic functionality that should be implemented by visitors that return a result value of a specific type.</summary>
      <typeparam name="TResultType">The type of the result produced by the visitor.</typeparam>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor`1" /> class. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbAndExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbAndExpression" />. </summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbAndExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbApplyExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbApplyExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbArithmeticExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbArithmeticExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbCaseExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbCaseExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbCastExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbCastExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbCastExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbComparisonExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbComparisonExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.Db ComparisonExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbConstantExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbCrossJoinExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbCrossJoinExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbDerefExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbDerefExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbDerefExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbDistinctExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbDistinctExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbDistinctExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbElementExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbElementExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbElementExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbEntityRefExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbEntityRefExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbEntityRefExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbExceptExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbExceptExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbExceptExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbExpression)">
      <summary>When overridden in a derived class, handles any expression of an unrecognized type.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbFilterExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbFunctionExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbGroupByExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbGroupByExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbGroupByExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbIntersectExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbIntersectExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbIntersectExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbIsEmptyExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbIsEmptyExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbIsNullExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbIsNullExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbIsNullExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbIsOfExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbIsOfExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbIsOfExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbJoinExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbLikeExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbLimitExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbNewInstanceExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbNotExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbNotExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbNotExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbNullExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbNullExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbNullExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbOfTypeExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbOfTypeExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbOfTypeExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbOrExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbOrExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbOrExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbProjectExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbPropertyExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbQuantifierExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbRefExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbRefExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbRefKeyExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbRefKeyExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbRefKeyExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbScanExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbScanExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbScanExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbSkipExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbSortExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbTreatExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbTreatExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbTreatExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbUnionAllExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbUnionAllExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbUnionAllExpression" /> that is being visited.</param>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>When overridden in a derived class, implements the visitor pattern for <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" />.</summary>
      <returns>A result value of a specific type.</returns>
      <param name="expression">The <see cref="T:System.Data.Common.CommandTrees.DbVariableReferenceExpression" /> that is being visited.</param>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbFilterExpression">
      <summary>Represents a predicate applied to filter an input set. This produces the set of elements that satisfy the predicate. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbFilterExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbFilterExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFilterExpression.Input">
      <summary>Gets the <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFilterExpression.Predicate">
      <summary>Gets or sets the <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that specifies the predicate used to filter the input set.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that specifies the predicate used to filter the input set.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of the <see cref="T:System.Data.Common.CommandTrees.DbFilterExpression" />, or its result type is not a Boolean type.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbFunctionAggregate">
      <summary>Supports standard aggregate functions, such as MIN, MAX, AVG, SUM, and so on. This class cannot be inherited. </summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFunctionAggregate.Distinct">
      <summary>Gets a value indicating whether this aggregate is a distinct aggregate.</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFunctionAggregate.Function">
      <summary>Gets the method metadata that specifies the aggregate function to invoke.</summary>
      <returns>The method metadata that specifies the aggregate function to invoke.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbFunctionCommandTree">
      <summary>Represents the invocation of a database function. </summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFunctionCommandTree.EdmFunction">
      <summary>Gets the <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> that represents the function that is being invoked.</summary>
      <returns>The <see cref="T:System.Data.Metadata.Edm.EdmFunction" /> that represents the function that is being invoked.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFunctionCommandTree.ResultType">
      <summary>Gets the expected result type for the function’s first result set.</summary>
      <returns>The expected result type for the function’s first result set.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbFunctionExpression">
      <summary>Represents an invocation of a function. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbFunctionExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbFunctionExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFunctionExpression.Arguments">
      <summary>Gets an <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> list that provides the arguments to the function.</summary>
      <returns>An <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> list that provides the arguments to the function.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbFunctionExpression.Function">
      <summary>Gets the metadata for the function to invoke.</summary>
      <returns>The metadata for the function to invoke.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbGroupByExpression">
      <summary>Represents a group by operation. A group by operation is a grouping of the elements in the input set based on the specified key expressions followed by the application of the specified aggregates. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbGroupByExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbGroupByExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupByExpression.Aggregates">
      <summary>Gets a <see cref="T:System.Data.Common.CommandTrees.DbAggregate" /> list that provides the aggregates to apply.</summary>
      <returns>A <see cref="T:System.Data.Common.CommandTrees.DbAggregate" /> list that provides the aggregates to apply.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupByExpression.Input">
      <summary>Gets the <see cref="T:System.Data.Common.CommandTrees.DbGroupExpressionBinding" /> that specifies the input set and provides access to the set element and group element variables.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbGroupExpressionBinding" /> that specifies the input set and provides access to the set element and group element variables.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupByExpression.Keys">
      <summary>Gets a <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> list that provides grouping keys.</summary>
      <returns>A <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> list that provides grouping keys.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbGroupExpressionBinding">
      <summary>Defines the binding for the input set to a <see cref="T:System.Data.Common.CommandTrees.DbGroupByExpression" />. This class cannot be inherited. </summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.Expression">
      <summary>Gets or sets the <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the input set.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the input set.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of the <see cref="T:System.Data.Common.CommandTrees.DbGroupExpressionBinding" />, or its result type is not equal or promotable to the result type of the current value of the property.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.GroupVariableName">
      <summary>Gets the name assigned to the group element variable.</summary>
      <returns>The name assigned to the group element variable.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.GroupVariableType">
      <summary>Gets the type metadata of the group element variable.</summary>
      <returns>The type metadata of the group element variable.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.VariableName">
      <summary>Gets the name assigned to the element variable.</summary>
      <returns>The name assigned to the element variable.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbGroupExpressionBinding.VariableType">
      <summary>Gets the type metadata of the element variable.</summary>
      <returns>The type metadata of the element variable.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbInsertCommandTree">
      <summary>Represents a single row insert operation expressed as a command tree. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbInsertCommandTree.Returning">
      <summary>Gets an <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that specifies a projection of results to be returned based on the modified rows. </summary>
      <returns>An <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that specifies a projection of results to be returned based on the modified rows. null indicates that no results should be returned from this command.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbInsertCommandTree.SetClauses">
      <summary>Gets the list of insert set clauses that define the insert operation. </summary>
      <returns>The list of insert set clauses that define the insert operation. </returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbIntersectExpression">
      <summary>Represents the set intersection operation between the left and right operands. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIntersectExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIntersectExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbIsEmptyExpression">
      <summary>Represents an empty set determination applied to a single set argument. This class cannot be inherited.  </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIsEmptyExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIsEmptyExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbIsNullExpression">
      <summary>Represents null determination applied to a single argument. This class cannot be inherited.  </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIsNullExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIsNullExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbIsOfExpression">
      <summary>Represents the type comparison of a single argument against the specified type. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIsOfExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbIsOfExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbIsOfExpression.OfType">
      <summary>Gets the type metadata that the type metadata of the argument should be compared to.</summary>
      <returns>The type metadata that the type metadata of the argument should be compared to.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbJoinExpression">
      <summary>Represents an inner, left outer, or full outer join operation between the given collection arguments on the specified join condition.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbJoinExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbJoinExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type. </param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbJoinExpression.JoinCondition">
      <summary>Gets or sets the join condition to apply.</summary>
      <returns>The join condition to apply.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of the <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" />, or its result type is not a Boolean type.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbJoinExpression.Left">
      <summary>Gets the <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that provides the left input.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that provides the left input.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbJoinExpression.Right">
      <summary>Gets the <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that provides the right input.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that provides the right input.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbLikeExpression">
      <summary>Represents a string comparison against the specified pattern with an optional escape string. This class cannot be inherited.  </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLikeExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLikeExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLikeExpression.Argument">
      <summary>Gets or sets an expression that specifies the string to compare against the given pattern.</summary>
      <returns>An expression that specifies the string to compare against the given pattern.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" />, or its result type is not a string type.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLikeExpression.Escape">
      <summary>Gets or sets an expression that provides an optional escape string to use for the comparison.</summary>
      <returns>An expression that provides an optional escape string to use for the comparison.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" />, or its result type is not a string type.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLikeExpression.Pattern">
      <summary>Gets or sets an expression that specifies the pattern against which the given string should be compared.</summary>
      <returns>An expression that specifies the pattern against which the given string should be compared.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of <see cref="T:System.Data.Common.CommandTrees.DbLikeExpression" />, or its result type is not a string type.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbLimitExpression">
      <summary>Represents the restriction of the number of elements in the argument collection to the specified limit value.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLimitExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbLimitExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLimitExpression.Argument">
      <summary>Gets or sets an expression that specifies the input collection.</summary>
      <returns>An expression that specifies the input collection.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of the <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" />, or its result type is not a collection type.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLimitExpression.Limit">
      <summary>Gets or sets an expression that specifies the limit on the number of elements returned from the input collection.</summary>
      <returns>An expression that specifies the limit on the number of elements returned from the input collection.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of the <see cref="T:System.Data.Common.CommandTrees.DbLimitExpression" />, or is not one of <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" /> or <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" />, or its result type is not equal or promotable to a 64-bit integer type.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbLimitExpression.WithTies">
      <summary>Gets whether the limit operation will include tied results. Including tied results might produce more results than specified by the <see cref="P:System.Data.Common.CommandTrees.DbLimitExpression.Limit" /> value.</summary>
      <returns>true if the limit operation will include tied results; otherwise, false. The default is false.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbModificationClause">
      <summary>Specifies a single clause in an insert or update modification operation.</summary>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbModificationCommandTree">
      <summary>Represents a data manipulation language (DML) operation expressed as a command tree.</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbModificationCommandTree.Target">
      <summary>Gets the <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the target table for the data manipulation language (DML) operation.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the target table for the DML operation.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbNewInstanceExpression">
      <summary>Represents the construction of a new instance of a given type, including set and record types. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbNewInstanceExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbNewInstanceExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbNewInstanceExpression.Arguments">
      <summary>Gets an <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> list that provides the property/column values or set elements for the new instance.</summary>
      <returns>An <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> list that provides the property/column values or set elements for the new instance.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbNotExpression">
      <summary>Represents the logical NOT of a single Boolean argument. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbNotExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbNotExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />. </returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbNullExpression">
      <summary>Represents a reference to a typed null literal. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbNullExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbNullExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbOfTypeExpression">
      <summary>Represents the retrieval of elements of the specified type from the given set argument. This class cannot be inherited.  </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbOfTypeExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbOfTypeExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbOfTypeExpression.OfType">
      <summary>Gets the metadata of the type of elements that should be retrieved from the set argument.</summary>
      <returns>The metadata of the type of elements that should be retrieved from the set argument. </returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbOrExpression">
      <summary>Represents the logical OR of two Boolean arguments. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbOrExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbOrExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression">
      <summary>Represents a reference to a parameter declared on the command tree that contains this expression. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbParameterReferenceExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbParameterReferenceExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />. </returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbParameterReferenceExpression.ParameterName">
      <summary>Gets the name of the referenced parameter.</summary>
      <returns>The name of the referenced parameter.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbProjectExpression">
      <summary>Represents the projection of a given input set over the specified expression. This class cannot be inherited.  </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbProjectExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbProjectExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbProjectExpression.Input">
      <summary>Gets the <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbProjectExpression.Projection">
      <summary>Gets or sets the <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the projection.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the projection.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of the <see cref="T:System.Data.Common.CommandTrees.DbProjectExpression" />, or its result type is not equal or promotable to the reference type of the current projection.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbPropertyExpression">
      <summary>Provides methods and properties for retrieving an instance property. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbPropertyExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbPropertyExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbPropertyExpression.Instance">
      <summary>Gets or sets a <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the instance from which the property should be retrieved.</summary>
      <returns>A <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the instance from which the property should be retrieved.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of the <see cref="T:System.Data.Common.CommandTrees.DbPropertyExpression" />, or its result type is not equal or promotable to the type that defines the property.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbPropertyExpression.Property">
      <summary>Gets the property metadata for the property to retrieve.</summary>
      <returns>The property metadata for the property to retrieve.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbQuantifierExpression">
      <summary>Represents a quantifier operation of the specified kind over the elements of the specified input set. This class cannot be inherited.  </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbQuantifierExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbQuantifierExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />. </returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbQuantifierExpression.Input">
      <summary>Gets the <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbQuantifierExpression.Predicate">
      <summary>Gets or sets the Boolean predicate that should be evaluated for each element in the input set.</summary>
      <returns>The Boolean predicate that should be evaluated for each element in the input set.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree for the <see cref="T:System.Data.Common.CommandTrees.DbQuantifierExpression" />,or its result type is not a Boolean type.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbQueryCommandTree">
      <summary>Represents a query operation expressed as a command tree. This class cannot be inherited.  </summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbQueryCommandTree.Query">
      <summary>Gets or sets an <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the logic of the query operation.</summary>
      <returns>An <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the logic of the query operation.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is associated with a different command tree.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbRefExpression">
      <summary>Represents a strongly typed reference to a specific instance within an entity set. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbRefExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbRefExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />. </returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbRefExpression.EntitySet">
      <summary>Gets the metadata for the entity set that contains the instance.</summary>
      <returns>The metadata for the entity set that contains the instance.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbRefKeyExpression">
      <summary>Represents the retrieval of the key value (in its structural form) from the underlying reference value. This class cannot be inherited.  </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbRefKeyExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbRefKeyExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression">
      <summary>Represents the navigation of a relationship. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value. </summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateFrom">
      <summary>Gets the metadata for the relationship end to navigate from.</summary>
      <returns>The metadata for the relationship end to navigate from.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateTo">
      <summary>Gets the metadata for the relationship end to navigate to.</summary>
      <returns>The metadata for the relationship end to navigate to.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.NavigationSource">
      <summary>Gets or sets an <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that specifies the starting point of the navigation and must be a reference to an entity instance.</summary>
      <returns>An <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that specifies the instance of the source relationship end from which navigation should occur.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of the <see cref="T:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression" />, or its result type is not equal or promotable to the reference type of the <see cref="P:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateFrom" /> property.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbRelationshipNavigationExpression.Relationship">
      <summary>Gets the metadata for the relationship over which navigation occurs.</summary>
      <returns>The metadata for the relationship over which navigation occurs.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbScanExpression">
      <summary>Represents a scan over an entity set or relationship set, as indicated by the <see cref="P:System.Data.Common.CommandTrees.DbScanExpression.Target" /> property. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbScanExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbScanExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />. </returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbScanExpression.Target">
      <summary>Gets the metadata for the referenced entity or relationship set.</summary>
      <returns>The metadata for the referenced entity or relationship set.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbSetClause">
      <summary>Specifies the clause in a modification operation that sets the value of a property. This class cannot be inherited. </summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSetClause.Property">
      <summary>Gets an <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that specifies the property that should be updated.</summary>
      <returns>An <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that specifies the property that should be updated.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSetClause.Value">
      <summary>Gets an <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that specifies the new value with which to update the property.</summary>
      <returns>An <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that specifies the new value with which to update the property. </returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbSkipExpression">
      <summary>Skips a specified number of elements in the input set. <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" /> can only be used after the input collection has been sorted as specified by the sort keys.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbSkipExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbSkipExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />. </returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSkipExpression.Count">
      <summary>Gets or sets an expression that specifies the number of elements to skip from the input collection.</summary>
      <returns>An expression that specifies the number of elements to skip from the input collection.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of the <see cref="T:System.Data.Common.CommandTrees.DbSkipExpression" />; the expression is not either a <see cref="T:System.Data.Common.CommandTrees.DbConstantExpression" /> or a <see cref="T:System.Data.Common.CommandTrees.DbParameterReferenceExpression" />; or the result type of the expression is not equal or promotable to a 64-bit integer type.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSkipExpression.Input">
      <summary>Gets the <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSkipExpression.SortOrder">
      <summary>Gets a <see cref="T:System.Data.Common.CommandTrees.DbSortClause" /> list that defines the sort order.</summary>
      <returns>A <see cref="T:System.Data.Common.CommandTrees.DbSortClause" /> list that defines the sort order.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbSortClause">
      <summary>Specifies a sort key that can be used as part of the sort order in a <see cref="T:System.Data.Common.CommandTrees.DbSortExpression" />. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSortClause.Ascending">
      <summary>Gets a Boolean value indicating whether or not this sort key uses an ascending sort order.</summary>
      <returns>true if this sort key uses an ascending sort order; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSortClause.Collation">
      <summary>Gets a string value that specifies the collation for this sort key.</summary>
      <returns>A string value that specifies the collation for this sort key.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSortClause.Expression">
      <summary>Gets or sets the <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that provides the value for this sort key.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that provides the value for this sort key.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbSortExpression">
      <summary>Represents a sort operation applied to the elements of the specified input set based on the given sort keys. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbSortExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbSortExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />. </returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSortExpression.Input">
      <summary>Gets the <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> that specifies the input set.</returns>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbSortExpression.SortOrder">
      <summary>Gets a <see cref="T:System.Data.Common.CommandTrees.DbSortClause" /> list that defines the sort order.</summary>
      <returns>A <see cref="T:System.Data.Common.CommandTrees.DbSortClause" /> list that defines the sort order.</returns>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbTreatExpression">
      <summary>Represents a type conversion operation applied to a polymorphic argument. This class cannot be inherited.  </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbTreatExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbTreatExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />. </returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultType">The type of the result produced by <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbUnaryExpression">
      <summary>Implements the basic functionality required by expressions that accept a single expression argument. </summary>
    </member>
    <member name="P:System.Data.Common.CommandTrees.DbUnaryExpression.Argument">
      <summary>Gets or sets the <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the argument.</summary>
      <returns>The <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> that defines the argument.</returns>
      <exception cref="T:System.ArgumentNullException">The expression is null.</exception>
      <exception cref="T:System.ArgumentException">The expression is not associated with the command tree of a <see cref="T:System.Data.Common.CommandTrees.DbUnaryExpression" />, or its result type is not equal or promotable to the required type for the argument.</exception>
    </member>
    <member name="T:System.Data.Common.CommandTrees.DbUnionAllExpression">
      <summary>Represents the set union (without duplicate removal) operation between the left and right operands. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbUnionAllExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Implements the visitor pattern for expressions that do not produce a result value.</summary>
      <param name="visitor">An instance of <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> is null.</exception>
    </member>
    <member name="M:System.Data.Common.CommandTrees.DbUnionAllExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Implements the visitor pattern for expressions that produce a result value of a specific type.</summary>
      <returns>A result value of a specific type produced by <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">An instance of a typed <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> that produces a result value of a specific type.</param>
      <typeparam name="TResultT